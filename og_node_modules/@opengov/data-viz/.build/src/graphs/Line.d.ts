import { ScaleLinear, ScaleOrdinal, ScalePoint } from 'd3-scale';
import * as React from 'react';
import { IBackdroppedLineStyle, IHoverPointStyle } from '../components';
import { ICoordinate } from '../data';
declare type IIdAssessor = (d: {
    [id: string]: string | number;
}) => string;
export interface ICategorizedPoint {
    id: string;
    category: string;
    data: any;
    value: number;
    x: number;
    y0: number;
    y1: number;
}
export interface ILineData {
    category: string;
    id: string;
    name: string;
    type: string;
    value: number;
}
export interface ILine<D> {
    categories: string[];
    colors?: ScaleOrdinal<string, any>;
    data: D[];
    dataIdAssessor?: IIdAssessor;
    lineStyle?: IBackdroppedLineStyle;
    pointInnerRadius?: number;
    pointOuterRadius?: number;
    pointStyle?: IHoverPointStyle;
    pointTargetRadius?: number;
    selectedCategory?: string;
    targetData?: number[];
    xScale: ScalePoint<any>;
    yScale: ScaleLinear<any, any>;
    classForLineContainer?(category: string): string;
    colorForInnerPoint?(point: ICategorizedPoint): string;
    colorForLine?(category: string): string;
    colorForOuterPoint?(point: ICategorizedPoint): string;
    onLineClick?(category: string): void;
    onLineEnter?(category: string): void;
    onLineLeave?(): void;
    onPointClick?(data: D): void;
    onPointEnter?(category: string, data: D, domCoordinate: ICoordinate, target: SVGCircleElement): void;
    onPointLeave?(domCoordinate: ICoordinate): void;
    styleForLine?(category: string): IBackdroppedLineStyle;
    styleForPoint?(point: ICategorizedPoint): IHoverPointStyle;
}
export declare const defaultMetaAssessor: (domain: any) => (d: any) => {
    id: any;
    label: any;
    domain: any;
};
export declare const defaultColorScale: ScaleOrdinal<string, {
    base: string;
    hover: string;
    line: string;
    stackedLinePoint: string;
    map: string;
}>;
export declare const Line: React.SFC<ILine<ILineData>>;
export {};
